--9
--a)Pentru marfa, o vom lua pe cea care a avut data livrării în luna martie. Apoi, pentru fiecare locatie,
-- calculam cate cutii s-au primit la marfa si de asemenea, salvam data livrarii pentru fiecare cutie 
--de la marfa.
CREATE OR REPLACE PROCEDURE proceduraex9a AS
   TYPE cutii_comanda IS TABLE OF contor_marfa.nr_cutii%TYPE; -- nested table
   TYPE id_magazin IS TABLE OF contor_marfa.id_magazin%TYPE INDEX BY PLS_INTEGER; -- tabela indexata
   TYPE marfa_info IS VARRAY(100) OF VARCHAR2(100); 

   v_cutii cutii_comanda;
   v_locatie_id id_magazin;
   v_marfa_info marfa_info;

   CURSOR c_marfa_martie IS
      SELECT id_marfa, data_livrare
      FROM marfa
      WHERE EXTRACT(MONTH FROM data_livrare) = 3;

BEGIN
    v_marfa_info := marfa_info();
    v_marfa_info.extend(100);
    
   FOR m IN c_marfa_martie LOOP
      SELECT contor_marfa.nr_cutii, contor_marfa.id_magazin, TO_CHAR(m.data_livrare, 'DD-MON-YYYY')
      BULK COLLECT INTO v_cutii, v_locatie_id, v_marfa_info
      FROM contor_marfa
      WHERE contor_marfa.id_marfa = m.id_marfa;
		
      FOR i IN 1..v_locatie_id.COUNT LOOP
         -- Calculam nr total de cutii pt fiecare locatie
         DBMS_OUTPUT.PUT_LINE('Magazinul ' || v_locatie_id(i) || ' a primit ' || v_cutii(i) || ' cutii de marfa pe ' || v_marfa_info(i) || '.');
      END LOOP;
   END LOOP;
END proceduraex9a;
/
    
BEGIN
    proceduraex9a;
END;
/


--b)Pentru fiecare angajat, afisam media notelor de la rating primite.
CREATE OR REPLACE PROCEDURE proceduraex9b IS
   -- Cursor simplu pentru a itera prin fiecare angajat
   CURSOR c_angajati IS
      SELECT id_angajat,
             nume_angajat,
             prenume_angajat
      FROM angajati;

-- Cursor parametrizat pentru a calcula media notelor primite de fiecare angajat
   CURSOR c_rating (p_id_angajat NUMBER) IS
      SELECT AVG(nota_acordata) AS media
      FROM rating
      WHERE id_angajat = p_id_angajat;

-- Variabile pentru a stoca media notelor primite de fiecare angajat
   v_id_angajat   angajati.id_angajat%TYPE;
   v_nume         angajati.nume_angajat%TYPE;
   v_prenume      angajati.prenume_angajat%TYPE;
   v_media_rating rating.nota_acordata%TYPE;

BEGIN
   -- Iteram prin fiecare angajat
   FOR r_angajati IN c_angajati LOOP
      v_id_angajat := r_angajati.id_angajat;
      v_nume := r_angajati.nume_angajat;
      v_prenume := r_angajati.prenume_angajat;

      -- Calculam media notelor primite de fiecare angajat
      OPEN c_rating(v_id_angajat);
      FETCH c_rating INTO v_media_rating;


-- Verificăm dacă a fost returnată o medie
      IF v_media_rating IS NOT NULL THEN
         -- Afisam media notelor primite de fiecare angajat
         DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' are media notelor primite: ' || v_media_rating);
      ELSE
         DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' nu are note primite.');
      END IF;
CLOSE c_rating;
   END LOOP;
END proceduraex9b;
/

BEGIN
    proceduraex9b;
END;
/


--c)Toate comenzile online care se incadreaza in perioada de valabilitate a reducerii (data_plasare > data_inceput reducere). 
--Exceptii: pt un client nu gaseste nicio comanda plasata sau nicio reducere valabila.
CREATE OR REPLACE FUNCTION functieex9c (
   p_id_client IN client.id_client%TYPE
) RETURN comenzi_online.id_comanda%TYPE
IS
   v_data_sfarsit DATE;
   v_rezultat     NUMBER;
   v_count_orders NUMBER;

   -- Definirea excepțiilor personalizate
   exceptie1 EXCEPTION;
   PRAGMA exception_init(exceptie1, -20001);
   exceptie2 EXCEPTION;
   PRAGMA exception_init(exceptie2, -20002);
   exceptie3 EXCEPTION;
   PRAGMA exception_init(exceptie3, -20003);

BEGIN
   -- Verificarea existenței clientului
   SELECT COUNT(*)
   INTO v_rezultat
   FROM client
   WHERE id_client = p_id_client;

   IF v_rezultat = 0 THEN
      RAISE exceptie3; -- Clientul nu există
   ELSIF v_rezultat > 1 THEN
      RAISE exceptie2; -- Există mai mulți clienți cu același ID
   END IF;

   -- Calcularea datei de sfârșit a perioadei de reducere
   SELECT ADD_MONTHS(data_inceput, perioada_valabilitate * 12)
   INTO v_data_sfarsit
   FROM reducere
   WHERE id_client = p_id_client;

   -- Verificare dacă există o reducere validă
   IF v_data_sfarsit IS NULL THEN
      RAISE exceptie1; -- Nu există reducere
   END IF;

   -- Extrage comenzile online pentru client în perioada de reducere
   SELECT COUNT(co.id_comanda)
   INTO v_count_orders
   FROM comenzi_online co
   JOIN reducere r ON co.id_client = r.id_client
   WHERE co.id_client = p_id_client
     AND co.data_plasare BETWEEN r.data_inceput AND v_data_sfarsit;

   IF v_count_orders = 0 THEN
      RAISE exceptie1; -- Nu există comenzi online
   END IF;

   -- Returnează ID-ul comenzii (poate fi ajustat în funcție de nevoile tale)
   RETURN v_count_orders;

EXCEPTION
   WHEN exceptie1 THEN
      DBMS_OUTPUT.PUT_LINE('Nu exista nicio comanda plasata pentru clientul dat');
      RETURN 0;
   WHEN exceptie2 THEN
      DBMS_OUTPUT.PUT_LINE('Exista mai multi clienti cu acelasi id in baza de date');
      RETURN 0;
   WHEN exceptie3 THEN
      DBMS_OUTPUT.PUT_LINE('Clientul dat nu exista in baza de date');
      RETURN 0;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('A aparut o eroare: ' || SQLERRM);
      RETURN 0;
END functieex9c;
/

-- Apelarea funcției cu un ID de client existent și care are comenzi
SELECT functieex9c(61) FROM dual; -- Ar trebui să returneze numărul comenzilor

-- Apelarea funcției cu un ID de client care nu există
SELECT functieex9c(1) FROM dual; -- Ar trebui să afișeze mesajul că nu există 

-- Apelarea funcției cu un ID de client care nu are comenzi
SELECT functieex9c(101) FROM dual; -- Ar trebui să afișeze mesajul că nu există comenzi


--d)lUn trigger care sa permita lucrul asupra tabelului CONTRACT doar in intervalul 8-18, 
--de luni pana sambata.
CREATE OR REPLACE TRIGGER triggerex9d
BEFORE INSERT OR UPDATE OR DELETE ON contract
BEGIN
   IF (TO_CHAR(SYSDATE, 'D') = 7) OR 
      (TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) NOT BETWEEN '08' AND '18') THEN
      RAISE_APPLICATION_ERROR(
         -20001,
         'Tabelul nu poate fi actualizat in afara orelor de lucru!'
      );
   END IF; 
END;
/

UPDATE contract
SET tip_contract = 'angajat';




--e)Un trigger care sa nu permita ca reducerea unui client sa depaseasca 50%
CREATE OR REPLACE TRIGGER triggerex9e
BEFORE UPDATE OF procent ON reducere
FOR EACH ROW
WHEN (NEW.procent > 50)
BEGIN
   RAISE_APPLICATION_ERROR(
      -20002,
      'Procentul de reducere nu poate depasi 50%!'
   );
END;
/


UPDATE reducere
SET procent = procent + 50;




--f)Trigger dintr-o comanda LDD 
CREATE TABLE erori (
   nume_bd VARCHAR2(50),
   user_logat VARCHAR2(30),
   data_occurenta TIMESTAMP(3),
   mesaj_eroare VARCHAR2(2000)
);

CREATE OR REPLACE TRIGGER triggerex9f
AFTER SERVERERROR ON SCHEMA
DECLARE
   v_error_msg VARCHAR2(2000);
BEGIN
   -- Captăm ultimul mesaj de eroare generat
   v_error_msg := DBMS_UTILITY.FORMAT_ERROR_STACK;
   INSERT INTO erori (nume_bd, user_logat, data_occurenta, mesaj_eroare)
   VALUES (
      SYS_CONTEXT('USERENV', 'DB_NAME'),   -- Folosim SYS_CONTEXT pentru a obține numele bazei de date
      SYS_CONTEXT('USERENV', 'SESSION_USER'), -- Folosim SYS_CONTEXT pentru a obține utilizatorul logat
      SYSTIMESTAMP,                              -- Data și ora la care a apărut eroarea
      v_error_msg                             -- Mesajul de eroare capturat
   );
END;
/

SELECT * FROM erori;

BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE a DROP COLUMN nonexistent_column';
END;


--g) Pachet care să conțină toate obiectele definite în cadrul punctelor a b c d e f (inclusiv apelarea
--lor). Triggeri-i vor fi declanșați de instrucțiuni din subprogramele încapsulate în pachet.

CREATE OR REPLACE PACKAGE pachet_marfa AS
    PROCEDURE proceduraex9a;
    PROCEDURE proceduraex9b;
    FUNCTION functieex9c(p_id_client IN client.id_client%TYPE) RETURN comenzi_online.id_comanda%TYPE;
END pachet_marfa;
/
CREATE OR REPLACE PACKAGE BODY pachet_marfa AS
    -- Procedura a)
    PROCEDURE proceduraex9a AS
      TYPE cutii_comanda IS TABLE OF contor_marfa.nr_cutii%TYPE; -- nested table
         TYPE id_magazin IS TABLE OF contor_marfa.id_magazin%TYPE INDEX BY PLS_INTEGER; -- tabela indexata
         TYPE marfa_info IS VARRAY(100) OF VARCHAR2(100); 
       v_cutii cutii_comanda;
       v_locatie_id id_magazin;
       v_marfa_info marfa_info;
       CURSOR c_marfa_martie IS
          SELECT id_marfa, data_livrare
          FROM marfa
          WHERE EXTRACT(MONTH FROM data_livrare) = 3;
    
    BEGIN
        v_marfa_info := marfa_info();
        v_marfa_info.extend(100);
        
      BEGIN
      -- Actualizare pentru a declanșa triggerul în afara orelor de lucru
         UPDATE contract
         SET tip_contract = 'nou_tip'
         WHERE id_contract = 1;  -- Înlocuiește cu un ID valid existent în tabelul `contract`
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Eroare: ' || SQLERRM); -- Afișează mesajul de eroare din trigger
      END;
       FOR m IN c_marfa_martie LOOP
          SELECT contor_marfa.nr_cutii, contor_marfa.id_magazin, TO_CHAR(m.data_livrare, 'DD-MON-YYYY')
          BULK COLLECT INTO v_cutii, v_locatie_id, v_marfa_info
          FROM contor_marfa
          WHERE contor_marfa.id_marfa = m.id_marfa;
         
          FOR i IN 1..v_locatie_id.COUNT LOOP
             -- Calculam nr total de cutii pt fiecare locatie
             DBMS_OUTPUT.PUT_LINE('Magazinul ' || v_locatie_id(i) || ' a primit ' || v_cutii(i) || ' cutii de marfa pe ' || v_marfa_info(i) || '.');
          END LOOP;
       END LOOP;
    END proceduraex9a;
    -- Procedura b)
    PROCEDURE proceduraex9b IS
      -- Cursor simplu pentru a itera prin fiecare angajat
       CURSOR c_angajati IS
          SELECT id_angajat,
                 nume_angajat,
                 prenume_angajat
          FROM angajati;
    
      -- Cursor parametrizat pentru a calcula media notelor primite de fiecare angajat
       CURSOR c_rating (p_id_angajat NUMBER) IS
          SELECT AVG(nota_acordata) AS media
          FROM rating
          WHERE id_angajat = p_id_angajat;
      -- Variabile pentru a stoca media notelor primite de fiecare angajat
       v_id_angajat   angajati.id_angajat%TYPE;
       v_nume         angajati.nume_angajat%TYPE;
       v_prenume      angajati.prenume_angajat%TYPE;
       v_media_rating rating.nota_acordata%TYPE;
    BEGIN
       -- Iteram prin fiecare angajat
       FOR r_angajati IN c_angajati LOOP
          v_id_angajat := r_angajati.id_angajat;
          v_nume := r_angajati.nume_angajat;
          v_prenume := r_angajati.prenume_angajat;
    
          -- Calculam media notelor primite de fiecare angajat
          OPEN c_rating(v_id_angajat);
          FETCH c_rating INTO v_media_rating;
    
     -- Verificăm dacă a fost returnată o medie
          IF v_media_rating IS NOT NULL THEN
             -- Afisam media notelor primite de fiecare angajat
             DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' are media notelor primite: ' || v_media_rating);
          ELSE
             DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' nu are note primite.');
          END IF;
    CLOSE c_rating;
       END LOOP;
    END proceduraex9b;

    --Funcția c)
    FUNCTION functieex9c (
         p_id_client IN client.id_client%TYPE
    ) RETURN comenzi_online.id_comanda%TYPE
    IS
       v_data_sfarsit DATE;
       v_rezultat     NUMBER;
       v_count_orders NUMBER;
    
       -- Definirea excepțiilor personalizate
       exceptie1 EXCEPTION;
       PRAGMA exception_init(exceptie1, -20001);
       exceptie2 EXCEPTION;
       PRAGMA exception_init(exceptie2, -20002);
       exceptie3 EXCEPTION;
       PRAGMA exception_init(exceptie3, -20003);
    
    BEGIN
    	UPDATE reducere SET procent = 60 WHERE id_client = 62;
       -- Verificarea existenței clientului
       SELECT COUNT(*)
       INTO v_rezultat
       FROM client
       WHERE id_client = p_id_client;
    
       IF v_rezultat = 0 THEN
          RAISE exceptie3; -- Clientul nu există
       ELSIF v_rezultat > 1 THEN
          RAISE exceptie2; -- Există mai mulți clienți cu același ID
       END IF;
    
       -- Calcularea datei de sfârșit a perioadei de reducere
       SELECT ADD_MONTHS(data_inceput, perioada_valabilitate * 12)
       INTO v_data_sfarsit
       FROM reducere
       WHERE id_client = p_id_client;
    
       -- Verificare dacă există o reducere validă
       IF v_data_sfarsit IS NULL THEN
          RAISE exceptie1; -- Nu există reducere
       END IF;
    
       -- Extrage comenzile online pentru client în perioada de reducere
       SELECT COUNT(co.id_comanda)
       INTO v_count_orders
       FROM comenzi_online co
       JOIN reducere r ON co.id_client = r.id_client
       WHERE co.id_client = p_id_client
         AND co.data_plasare BETWEEN r.data_inceput AND v_data_sfarsit;
    
       IF v_count_orders = 0 THEN
          RAISE exceptie1; -- Nu există comenzi online
       END IF;
    
       -- Returnează ID-ul comenzii (poate fi ajustat în funcție de nevoile tale)
       RETURN v_count_orders;
    
    EXCEPTION
       WHEN exceptie1 THEN
          DBMS_OUTPUT.PUT_LINE('Nu exista nicio comanda plasata pentru clientul dat');
          RETURN 0;
       WHEN exceptie2 THEN
          DBMS_OUTPUT.PUT_LINE('Exista mai multi clienti cu acelasi id in baza de date');
          RETURN 0;
       WHEN exceptie3 THEN
          DBMS_OUTPUT.PUT_LINE('Clientul dat nu exista in baza de date');
          RETURN 0;
       WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('A aparut o eroare: ' || SQLERRM);
          RETURN 0;
    END functieex9c;
END; 
/

BEGIN
    pachet_marfa.proceduraex9a;
    pachet_marfa.proceduraex9b;
    DBMS_OUTPUT.PUT_LINE('Numărul comenzilor online: ' || pachet_marfa.functieex9c(63));
END;
/