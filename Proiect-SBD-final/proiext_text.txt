CREATE TABLE producator (
   id_producator NUMBER(5) CONSTRAINT pk_producator PRIMARY KEY,
   nume VARCHAR(20) CONSTRAINT nume_producator NOT NULL,
   telefon VARCHAR(15) CONSTRAINT telefon_producator NOT NULL,
   email VARCHAR(20) CONSTRAINT email_producator NOT NULL
);

INSERT INTO producator 
VALUES (1, 'BrandMarck', '0345678322', 'contact@gmail.com');
INSERT INTO producator 
VALUES (2, 'ClothesForEveryone', '0789345655', 'clothes_1@gmail.com');
INSERT INTO producator 
VALUES (3, 'MadeInMorocco', '0345687732', 'callus@yahoo.com');
INSERT INTO producator 
VALUES (4, 'HommyTilfinger', '034544377', 'hommy_t@gmail.com');
INSERT INTO producator 
VALUES (5, 'BugoHoss', '0456788124', 'bugo12@gmail.com');

COMMIT;

SELECT * FROM producator;




CREATE TABLE marfa (
   id_marfa NUMBER(5) CONSTRAINT pk_marfa PRIMARY KEY,
   data_livrare DATE CONSTRAINT data_marfa NOT NULL
);

INSERT INTO marfa 
VALUES (6, TO_DATE('15-03-2023', 'DD-MM-YYYY'));
INSERT INTO marfa 
VALUES (7, TO_DATE('01-03-2023', 'DD-MM-YYYY'));
INSERT INTO marfa 
VALUES (8, TO_DATE('15-04-2023', 'DD-MM-YYYY'));
INSERT INTO marfa 
VALUES (9, TO_DATE('01-04-2023', 'DD-MM-YYYY'));
INSERT INTO marfa 
VALUES (10, TO_DATE('01-05-2023', 'DD-MM-YYYY'));

COMMIT;

SELECT * FROM marfa;



CREATE TABLE produse_defecte (
   id_defect NUMBER(5) CONSTRAINT pk_prod_defect PRIMARY KEY,
   data_inregistrare DATE CONSTRAINT data_prod_defect NOT NULL,
   cod_produs NUMBER(15) CONSTRAINT cod_prod_defect NOT NULL,
   id_producator NUMBER(5),
   CONSTRAINT fk_prod_def FOREIGN KEY (id_producator) REFERENCES producator (id_producator),
   id_marfa NUMBER(5),
   CONSTRAINT fk_prod_deff FOREIGN KEY (id_marfa) REFERENCES marfa (id_marfa)
);

INSERT INTO produse_defecte 
VALUES (11, TO_DATE('15-01-2023', 'DD-MM-YYYY'), 1234670800, 1, 7);
INSERT INTO produse_defecte 
VALUES (12, TO_DATE('03-04-2022', 'DD-MM-YYYY'), 2345674456, 4, 10);
INSERT INTO produse_defecte 
VALUES (13, TO_DATE('16-02-2023', 'DD-MM-YYYY'), 1456239485, 5, 8);
INSERT INTO produse_defecte 
VALUES (14, TO_DATE('17-12-2022', 'DD-MM-YYYY'), 3456233466, 3, 9);
INSERT INTO produse_defecte 
VALUES (15, TO_DATE('18-01-2023', 'DD-MM-YYYY'), 4332456800, 2, 6);
INSERT INTO produse_defecte 
VALUES (16, TO_DATE('20-01-2023', 'DD-MM-YYYY'), 2331441500, 2, 7);
INSERT INTO produse_defecte 
VALUES (17, TO_DATE('14-12-2022', 'DD-MM-YYYY'), 2230450678, 3, 10);
INSERT INTO produse_defecte 
VALUES (18, TO_DATE('01-02-2023', 'DD-MM-YYYY'), 4523900800, 5, 9);
INSERT INTO produse_defecte 
VALUES (19, TO_DATE('22-11-2022', 'DD-MM-YYYY'), 4567890957, 1, 8);
INSERT INTO produse_defecte 
VALUES (20, TO_DATE('13-01-2023', 'DD-MM-YYYY'), 3453230567, 3, 9);

COMMIT;

SELECT * FROM produse_defecte;



CREATE TABLE oysho (
   id_oysho NUMBER(5) CONSTRAINT pk_oysho PRIMARY KEY,
   tara VARCHAR(20) CONSTRAINT tara_oysho NOT NULL,
   oras VARCHAR(20) CONSTRAINT oras_oysho NOT NULL,
   id_producator NUMBER(5),
   CONSTRAINT fk_oysho FOREIGN KEY (id_producator) REFERENCES producator (id_producator)
);

INSERT INTO oysho 
VALUES (21, 'Romania', 'Bucuresti', 1);
INSERT INTO oysho 
VALUES (22, 'Spania', 'Madrid', 4);
INSERT INTO oysho 
VALUES (23, 'Italia', 'Roma', 5);
INSERT INTO oysho 
VALUES (24, 'Franta', 'Paris', 2);
INSERT INTO oysho 
VALUES (25, 'Portugalia', 'Lisabona', 3);

COMMIT;

SELECT * FROM oysho;




CREATE TABLE angajati (
   id_angajat NUMBER(5) CONSTRAINT pk_angajat PRIMARY KEY,
   nume_angajat VARCHAR(50) CONSTRAINT nume_angajat NOT NULL,
   prenume_angajat VARCHAR(50) CONSTRAINT prenume_angajat NOT NULL,
   telefon_angajat VARCHAR(50) CONSTRAINT telefon_angajat NOT NULL,
   email_angajat VARCHAR(50) CONSTRAINT email_angajat NOT NULL,
   adresa_angajat VARCHAR(50) CONSTRAINT adresa_angajat NOT NULL
);

INSERT INTO angajati
VALUES (26, 'Florea', 'Catalin', '0756345786', 'florea@gmail.com', 'Florilor 6');
INSERT INTO angajati
VALUES (27, 'Adam', 'Antonio', '0746330454', 'andy_ad@gmail.com', 'Tepes Voda 25');
INSERT INTO angajati
VALUES (28, 'Vulcanescu', 'Mircea', '0745555676', 'mirciulica123@gmail.com', 'Rezervelor 4');
INSERT INTO angajati
VALUES (29, 'Ceausu', 'Radu', '0789888543', 'radulish@yahoo.com', 'Anton Pann 32');
INSERT INTO angajati
VALUES (30, 'Craciun', 'Alexandru', '0734565723', 'christmas_alex@gmail.com', 'Mircea Voievod 67');
INSERT INTO angajati
VALUES (36, 'Aldea', 'Alexia', '0756888187', 'alexia@gmail.com', 'Constructorilor 29');
INSERT INTO angajati
VALUES (37, 'Rosu', 'Cristina', '0731456777', 'cris_rosu@gmail.com', 'Teiul Doamnnei 12');
INSERT INTO angajati
VALUES (38, 'Luta', 'Alexandra', '0733454558', 'kiwi@gmail.com', 'Grozavesti 34');
INSERT INTO angajati
VALUES (39, 'Pentu', 'Miruna', '0735464889', 'mirus.spirus@gmail.com', 'Bucurestii Noi 1');
INSERT INTO angajati
VALUES (40, 'Bozeanu', 'Mirela', '0763888176', 'miree_boze@gmail.com', 'Morarilor 90');

COMMIT;

SELECT * FROM angajati;



CREATE TABLE locatie (
   id_magazin NUMBER(5) CONSTRAINT pk_locatie PRIMARY KEY,
   nume_magazin VARCHAR(20) CONSTRAINT nume_locatie NOT NULL,
   telefon VARCHAR(20) CONSTRAINT telefon_magazin NOT NULL,
   email VARCHAR(50) CONSTRAINT email_magazin NOT NULL,
   adresa VARCHAR(100) CONSTRAINT adresa_magazin NOT NULL,
   id_oysho NUMBER(5),
   CONSTRAINT fk_magazin FOREIGN KEY (id_oysho) REFERENCES oysho (id_oysho),
   id_manager NUMBER(5),
   CONSTRAINT fk_magg FOREIGN KEY (id_manager) REFERENCES angajati (id_angajat)
);

INSERT INTO locatie 
VALUES (31, 'Oysho Promenada', '031455678', 'oysho_prome@gmail.com', 'Barbu Vacarescu 8', 21, 30);
INSERT INTO locatie 
VALUES (32, 'Oysho SunPlaza', '0314567890', 'oysho_sunplaza@gmail.com', 'Vacaresti 32', 22, 26);
INSERT INTO locatie 
VALUES (33, 'Oysho Cotroceni', '031400500', 'oysho_afi@gmail.com', 'Cotroceni 35', 23, 29);
INSERT INTO locatie 
VALUES (34, 'Oysho Baneasa', '031444556', 'oysho_baneasa@gmail.com', 'Bucuresti-Ploiesti 14', 24, 28);
INSERT INTO locatie 
VALUES (35, 'Oysho ParkLake', '031446673', 'oysho_parklake@gmail.com', 'Liviu Rebreanu 5', 25, 27);

COMMIT;

SELECT * FROM locatie;




CREATE TABLE contract (
   id_contract NUMBER(5) CONSTRAINT pk_contr PRIMARY KEY,
   data_semnarii DATE CONSTRAINT data_contract NOT NULL,
   tip_contract VARCHAR(20) CONSTRAINT tip_contract NOT NULL,
   id_oysho NUMBER(5),
   CONSTRAINT fk_contr_oysho FOREIGN KEY (id_oysho) REFERENCES oysho (id_oysho),
   id_angajat NUMBER(5),
   CONSTRAINT fk_contr_angajat FOREIGN KEY (id_angajat) REFERENCES angajati (id_angajat)
);

INSERT INTO contract 
VALUES (41, TO_DATE('15-01-2023', 'DD-MM-YYYY'), 'Full-time', 21, 29);
INSERT INTO contract 
VALUES (42, TO_DATE('01-02-2023', 'DD-MM-YYYY'), 'Part-time', 22, 26);
INSERT INTO contract 
VALUES (43, TO_DATE('03-03-2023', 'DD-MM-YYYY'), 'Full-time', 23, 26);
INSERT INTO contract 
VALUES (44, TO_DATE('15-04-2023', 'DD-MM-YYYY'), 'Full-time', 24, 27);
INSERT INTO contract 
VALUES (45, TO_DATE('20-04-2023', 'DD-MM-YYYY'), 'Part-time', 25, 30);
INSERT INTO contract 
VALUES (46, TO_DATE('18-02-2023', 'DD-MM-YYYY'), 'Full-time', 22, 31);
INSERT INTO contract 
VALUES (47, TO_DATE('31-01-2020', 'DD-MM-YYYY'), 'Part-time', 25, 40);
INSERT INTO contract 
VALUES (48, TO_DATE('16-10-2021', 'DD-MM-YYYY'), 'Part-time', 24, 36);
INSERT INTO contract 
VALUES (49, TO_DATE('25-09-2021', 'DD-MM-YYYY'), 'Part-time', 21, 37);
INSERT INTO contract 
VALUES (50, TO_DATE('19-07-2022', 'DD-MM-YYYY'), 'Part-time', 23, 38);

COMMIT;

SELECT * FROM contract;



CREATE TABLE contor_marfa (
   id_contor NUMBER(5) CONSTRAINT pk_contor PRIMARY KEY,
   nr_cutii NUMBER(5) CONSTRAINT cutii_contor NOT NULL,
   id_marfa NUMBER(5),
    CONSTRAINT fk_contor FOREIGN KEY (id_marfa)REFERENCES marfa (id_marfa),
   id_magazin NUMBER(5),
   CONSTRAINT fk_contorr FOREIGN KEY (id_magazin) REFERENCES locatie (id_magazin)
);

INSERT INTO contor_marfa 
VALUES (51, 156, 6, 34);
INSERT INTO contor_marfa 
VALUES (52, 144, 8, 33);
INSERT INTO contor_marfa 
VALUES (53, 200, 9, 35);
INSERT INTO contor_marfa 
VALUES (54, 45, 10, 31);
INSERT INTO contor_marfa 
VALUES (55, 57, 8, 32);
INSERT INTO contor_marfa 
VALUES (56, 230, 7, 35);
INSERT INTO contor_marfa 
VALUES (57, 400, 6, 33);
INSERT INTO contor_marfa 
VALUES (58, 245, 9, 32);
INSERT INTO contor_marfa 
VALUES (59, 120, 7, 35);
INSERT INTO contor_marfa 
VALUES (60, 89, 9, 34);

COMMIT;

SELECT * FROM contor_marfa;



CREATE TABLE client (
   id_client NUMBER(5) CONSTRAINT pk_client PRIMARY KEY,
   nume_client VARCHAR(20) CONSTRAINT ck_nume_client NOT NULL,
   prenume_client VARCHAR(20) CONSTRAINT ck_prenume_client NOT NULL,
   email_client VARCHAR(50) CONSTRAINT ck_email_client NOT NULL,
   telefon_client VARCHAR(20) CONSTRAINT ck_telefon_client NOT NULL
);

INSERT INTO client
VALUES (61, 'Pirinei', 'Ionut', 'ionut@gmail.com', '0756789900');
INSERT INTO client
VALUES (62, 'Predeanu', 'Mariana', 'mary12@gmail.com', '0745677899');
INSERT INTO client
VALUES (63, 'Ciocos', 'Bianca', 'bye_eu@gmail.com', '0765444143');
INSERT INTO client
VALUES (64, 'Teodoroiu', 'Cristina', 'cris_teo@gmail.com', '0746767888');
INSERT INTO client
VALUES (65, 'Mircea', 'Carina', 'cary_cary@gmail.com', '0745883464');
INSERT INTO client
VALUES (101, 'Clientul', 'Anonim', 'carie@gmail.com', '0745345464');

COMMIT;

SELECT * FROM client;



CREATE TABLE comenzi_online (
   id_comanda NUMBER(5) CONSTRAINT pk_comanda PRIMARY KEY,
   data_plasare DATE CONSTRAINT ck_data_comanda NOT NULL,
   data_sosire DATE CONSTRAINT ck_data_sosire NOT NULL,
   adresa_livrare VARCHAR(100) CONSTRAINT ck_adresa_comanda NOT NULL,
   id_magazin NUMBER(5),
   CONSTRAINT fk_comanda_magazin FOREIGN KEY (id_magazin) REFERENCES locatie (id_magazin),
   id_client NUMBER(5),
   CONSTRAINT fk_comanda_client FOREIGN KEY (id_client) REFERENCES client (id_client)
);

INSERT INTO comenzi_online 
VALUES (66, TO_DATE('16-01-2023', 'DD-MM-YYYY'), TO_DATE('24-02-2023', 'DD-MM-YYYY'), 'Barbu Vacarescu 70', 31, 64);
INSERT INTO comenzi_online 
VALUES (67, TO_DATE('31-01-2023', 'DD-MM-YYYY'), TO_DATE('14-02-2023', 'DD-MM-YYYY'), 'Liviu Rebreanu 13', 33, 61);
INSERT INTO comenzi_online 
VALUES (68, TO_DATE('14-02-2023', 'DD-MM-YYYY'), TO_DATE('15-03-2023', 'DD-MM-YYYY'), 'Magheru 13', 32, 65);
INSERT INTO comenzi_online 
VALUES (69, TO_DATE('22-02-2023', 'DD-MM-YYYY'), TO_DATE('18-03-2023', 'DD-MM-YYYY'), 'Nicolae Grigorescu 17', 34, 64);
INSERT INTO comenzi_online 
VALUES (70, TO_DATE('29-03-2023', 'DD-MM-YYYY'), TO_DATE('14-04-2023', 'DD-MM-YYYY'), 'Vlad Tepes 13', 35, 63);
INSERT INTO comenzi_online 
VALUES (71, TO_DATE('15-04-2023', 'DD-MM-YYYY'), TO_DATE('16-05-2023', 'DD-MM-YYYY'), 'Crizantemelor 50', 33, 65);
INSERT INTO comenzi_online 
VALUES (72, TO_DATE('20-03-2023', 'DD-MM-YYYY'), TO_DATE('17-04-2023', 'DD-MM-YYYY'), 'Decebal 20', 31, 61);
INSERT INTO comenzi_online 
VALUES (73, TO_DATE('14-02-2023', 'DD-MM-YYYY'), TO_DATE('18-04-2023', 'DD-MM-YYYY'), 'Lascar Catargiu 12', 32, 65);
INSERT INTO comenzi_online 
VALUES (74, TO_DATE('15-01-2023', 'DD-MM-YYYY'), TO_DATE('13-02-2023', 'DD-MM-YYYY'), 'Regina Elisabeta 3', 34, 65);
INSERT INTO comenzi_online 
VALUES (75, TO_DATE('22-03-2023', 'DD-MM-YYYY'), TO_DATE('14-04-2023', 'DD-MM-YYYY'), 'Sfanta Vineri 34', 32, 62);

COMMIT;

SELECT * FROM comenzi_online;



CREATE TABLE rating (
   id_rating NUMBER(5) CONSTRAINT pk_rating PRIMARY KEY,
   nota_acordata NUMBER(5) CONSTRAINT ck_nota_rating NOT NULL,
   id_angajat NUMBER(5),
   CONSTRAINT fk_rating_angajat FOREIGN KEY (id_angajat) REFERENCES angajati (id_angajat),
   id_client NUMBER(5),
   CONSTRAINT fk_rating_client FOREIGN KEY (id_client) REFERENCES client (id_client)
);

INSERT INTO rating 
VALUES (76, 8, 26, 65);
INSERT INTO rating 
VALUES (77, 10, 27, 61);
INSERT INTO rating 
VALUES (78, 5, 37, 64);
INSERT INTO rating 
VALUES (79, 7, 30, 61);
INSERT INTO rating 
VALUES (80, 9, 38, 65);
INSERT INTO rating 
VALUES (91, 3, 36, 63);
INSERT INTO rating 
VALUES (92, 7, 39, 64);
INSERT INTO rating 
VALUES (93, 2, 28, 61);
INSERT INTO rating 
VALUES (94, 10, 26, 65);
INSERT INTO rating 
VALUES (95, 9, 38, 63);

COMMIT;

SELECT * FROM rating;


CREATE TABLE review (
   id_review NUMBER(5) CONSTRAINT pk_review PRIMARY KEY,
   descriere VARCHAR(100) CONSTRAINT ck_descriere_review NOT NULL,
   id_magazin NUMBER(5),
   CONSTRAINT fk_review_magazin FOREIGN KEY (id_magazin) REFERENCES locatie (id_magazin),
   id_client NUMBER(5),
   CONSTRAINT fk_review_client FOREIGN KEY (id_client) REFERENCES client (id_client)
);

INSERT INTO review
VALUES (81, 'angajati foarte prietenosi', 33, 64);
INSERT INTO review
VALUES (82, 'haine calitative', 31, 65);
INSERT INTO review
VALUES (83, 'personal priceput', 32, 63);
INSERT INTO review
VALUES (84, 'ador acest brand', 34, 61);
INSERT INTO review
VALUES (85, 'mai revin aici', 35, 62);
INSERT INTO review
VALUES (96, 'nu mi-a placut', 31, 65);
INSERT INTO review
VALUES (97, 'haine calitative', 33, 63);
INSERT INTO review
VALUES (98, 'personal priceput', 34, 62);
INSERT INTO review
VALUES (99, 'ador acest brand', 31, 61);
INSERT INTO review
VALUES (100, 'mai revin aici', 34, 62);
 
COMMIT;

SELECT * FROM review;





CREATE TABLE reducere (
   id_reducere NUMBER(5) CONSTRAINT pk_reducere PRIMARY KEY,
   procent NUMBER(5) CONSTRAINT ck_procent_reducere NOT NULL,
   perioada_valabilitate NUMBER(5) CONSTRAINT ck_perioada_reducere NOT NULL,
   data_inceput DATE CONSTRAINT ck_data_inceput_reducere NOT NULL,
   id_client NUMBER(5),
   CONSTRAINT fk_reducere_client FOREIGN KEY (id_client) REFERENCES client (id_client)
);

INSERT INTO reducere 
VALUES (86, 10, 3, TO_DATE('01-01-2023', 'DD-MM-YYYY'), 61);
INSERT INTO reducere 
VALUES (87, 25, 5, TO_DATE('23-07-2022', 'DD-MM-YYYY'), 63);
INSERT INTO reducere 
VALUES (88, 40, 7, TO_DATE('24-11-2021', 'DD-MM-YYYY'), 65);
INSERT INTO reducere 
VALUES (89, 35, 2, TO_DATE('01-02-2023', 'DD-MM-YYYY'), 62);
INSERT INTO reducere 
VALUES (90, 25, 1, TO_DATE('15-01-2023', 'DD-MM-YYYY'), 64);

COMMIT;

SELECT * FROM reducere;




--9
--a)Pentru marfa, o vom lua pe cea care a avut data livrării în luna martie. Apoi, pentru fiecare locatie,
-- calculam cate cutii s-au primit la marfa si de asemenea, salvam data livrarii pentru fiecare cutie 
--de la marfa.
CREATE OR REPLACE PROCEDURE proceduraex9a AS
   TYPE cutii_comanda IS TABLE OF contor_marfa.nr_cutii%TYPE; -- nested table
   TYPE id_magazin IS TABLE OF contor_marfa.id_magazin%TYPE INDEX BY PLS_INTEGER; -- tabela indexata
   TYPE marfa_info IS VARRAY(100) OF VARCHAR2(100); 

   v_cutii cutii_comanda;
   v_locatie_id id_magazin;
   v_marfa_info marfa_info;

   CURSOR c_marfa_martie IS
      SELECT id_marfa, data_livrare
      FROM marfa
      WHERE EXTRACT(MONTH FROM data_livrare) = 3;

BEGIN
    v_marfa_info := marfa_info();
    v_marfa_info.extend(100);
    
   FOR m IN c_marfa_martie LOOP
      SELECT contor_marfa.nr_cutii, contor_marfa.id_magazin, TO_CHAR(m.data_livrare, 'DD-MON-YYYY')
      BULK COLLECT INTO v_cutii, v_locatie_id, v_marfa_info
      FROM contor_marfa
      WHERE contor_marfa.id_marfa = m.id_marfa;
		
      FOR i IN 1..v_locatie_id.COUNT LOOP
         -- Calculam nr total de cutii pt fiecare locatie
         DBMS_OUTPUT.PUT_LINE('Magazinul ' || v_locatie_id(i) || ' a primit ' || v_cutii(i) || ' cutii de marfa pe ' || v_marfa_info(i) || '.');
      END LOOP;
   END LOOP;
END proceduraex9a;
/
    
BEGIN
    proceduraex9a;
END;
/


--b)Pentru fiecare angajat, afisam media notelor de la rating primite.
CREATE OR REPLACE PROCEDURE proceduraex9b IS
   -- Cursor simplu pentru a itera prin fiecare angajat
   CURSOR c_angajati IS
      SELECT id_angajat,
             nume_angajat,
             prenume_angajat
      FROM angajati;

-- Cursor parametrizat pentru a calcula media notelor primite de fiecare angajat
   CURSOR c_rating (p_id_angajat NUMBER) IS
      SELECT AVG(nota_acordata) AS media
      FROM rating
      WHERE id_angajat = p_id_angajat;

-- Variabile pentru a stoca media notelor primite de fiecare angajat
   v_id_angajat   angajati.id_angajat%TYPE;
   v_nume         angajati.nume_angajat%TYPE;
   v_prenume      angajati.prenume_angajat%TYPE;
   v_media_rating rating.nota_acordata%TYPE;

BEGIN
   -- Iteram prin fiecare angajat
   FOR r_angajati IN c_angajati LOOP
      v_id_angajat := r_angajati.id_angajat;
      v_nume := r_angajati.nume_angajat;
      v_prenume := r_angajati.prenume_angajat;

      -- Calculam media notelor primite de fiecare angajat
      OPEN c_rating(v_id_angajat);
      FETCH c_rating INTO v_media_rating;


-- Verificăm dacă a fost returnată o medie
      IF v_media_rating IS NOT NULL THEN
         -- Afisam media notelor primite de fiecare angajat
         DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' are media notelor primite: ' || v_media_rating);
      ELSE
         DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' nu are note primite.');
      END IF;
CLOSE c_rating;
   END LOOP;
END proceduraex9b;
/

BEGIN
    proceduraex9b;
END;
/


--c)Toate comenzile online care se incadreaza in perioada de valabilitate a reducerii (data_plasare > data_inceput reducere). 
--Exceptii: pt un client nu gaseste nicio comanda plasata sau nicio reducere valabila.
CREATE OR REPLACE FUNCTION functieex9c (
   p_id_client IN client.id_client%TYPE
) RETURN comenzi_online.id_comanda%TYPE
IS
   v_data_sfarsit DATE;
   v_rezultat     NUMBER;
   v_count_orders NUMBER;

   -- Definirea excepțiilor personalizate
   exceptie1 EXCEPTION;
   PRAGMA exception_init(exceptie1, -20001);
   exceptie2 EXCEPTION;
   PRAGMA exception_init(exceptie2, -20002);
   exceptie3 EXCEPTION;
   PRAGMA exception_init(exceptie3, -20003);

BEGIN
   -- Verificarea existenței clientului
   SELECT COUNT(*)
   INTO v_rezultat
   FROM client
   WHERE id_client = p_id_client;

   IF v_rezultat = 0 THEN
      RAISE exceptie3; -- Clientul nu există
   ELSIF v_rezultat > 1 THEN
      RAISE exceptie2; -- Există mai mulți clienți cu același ID
   END IF;

   -- Calcularea datei de sfârșit a perioadei de reducere
   SELECT ADD_MONTHS(data_inceput, perioada_valabilitate * 12)
   INTO v_data_sfarsit
   FROM reducere
   WHERE id_client = p_id_client;

   -- Verificare dacă există o reducere validă
   IF v_data_sfarsit IS NULL THEN
      RAISE exceptie1; -- Nu există reducere
   END IF;

   -- Extrage comenzile online pentru client în perioada de reducere
   SELECT COUNT(co.id_comanda)
   INTO v_count_orders
   FROM comenzi_online co
   JOIN reducere r ON co.id_client = r.id_client
   WHERE co.id_client = p_id_client
     AND co.data_plasare BETWEEN r.data_inceput AND v_data_sfarsit;

   IF v_count_orders = 0 THEN
      RAISE exceptie1; -- Nu există comenzi online
   END IF;

   -- Returnează ID-ul comenzii (poate fi ajustat în funcție de nevoile tale)
   RETURN v_count_orders;

EXCEPTION
   WHEN exceptie1 THEN
      DBMS_OUTPUT.PUT_LINE('Nu exista nicio comanda plasata pentru clientul dat');
      RETURN 0;
   WHEN exceptie2 THEN
      DBMS_OUTPUT.PUT_LINE('Exista mai multi clienti cu acelasi id in baza de date');
      RETURN 0;
   WHEN exceptie3 THEN
      DBMS_OUTPUT.PUT_LINE('Clientul dat nu exista in baza de date');
      RETURN 0;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('A aparut o eroare: ' || SQLERRM);
      RETURN 0;
END functieex9c;
/

-- Apelarea funcției cu un ID de client existent și care are comenzi
SELECT functieex9c(61) FROM dual; -- Ar trebui să returneze numărul comenzilor

-- Apelarea funcției cu un ID de client care nu există
SELECT functieex9c(1) FROM dual; -- Ar trebui să afișeze mesajul că nu există 

-- Apelarea funcției cu un ID de client care nu are comenzi
SELECT functieex9c(101) FROM dual; -- Ar trebui să afișeze mesajul că nu există comenzi


--d)lUn trigger care sa permita lucrul asupra tabelului CONTRACT doar in intervalul 8-18, 
--de luni pana sambata.
CREATE OR REPLACE TRIGGER triggerex9d
BEFORE INSERT OR UPDATE OR DELETE ON contract
BEGIN
   IF (TO_CHAR(SYSDATE, 'D') = 7) OR 
      (TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) NOT BETWEEN '08' AND '18') THEN
      RAISE_APPLICATION_ERROR(
         -20001,
         'Tabelul nu poate fi actualizat in afara orelor de lucru!'
      );
   END IF; 
END;
/

UPDATE contract
SET tip_contract = 'angajat';




--e)Un trigger care sa nu permita ca reducerea unui client sa depaseasca 50%
CREATE OR REPLACE TRIGGER triggerex9e
BEFORE UPDATE OF procent ON reducere
FOR EACH ROW
WHEN (NEW.procent > 50)
BEGIN
   RAISE_APPLICATION_ERROR(
      -20002,
      'Procentul de reducere nu poate depasi 50%!'
   );
END;
/


UPDATE reducere
SET procent = procent + 50;




--f)Trigger dintr-o comanda LDD 
CREATE TABLE erori (
   nume_bd VARCHAR2(50),
   user_logat VARCHAR2(30),
   data_occurenta TIMESTAMP(3),
   mesaj_eroare VARCHAR2(2000)
);

CREATE OR REPLACE TRIGGER triggerex9f
AFTER SERVERERROR ON SCHEMA
DECLARE
   v_error_msg VARCHAR2(2000);
BEGIN
   -- Captăm ultimul mesaj de eroare generat
   v_error_msg := DBMS_UTILITY.FORMAT_ERROR_STACK;
   INSERT INTO erori (nume_bd, user_logat, data_occurenta, mesaj_eroare)
   VALUES (
      SYS_CONTEXT('USERENV', 'DB_NAME'),   -- Folosim SYS_CONTEXT pentru a obține numele bazei de date
      SYS_CONTEXT('USERENV', 'SESSION_USER'), -- Folosim SYS_CONTEXT pentru a obține utilizatorul logat
      SYSTIMESTAMP,                              -- Data și ora la care a apărut eroarea
      v_error_msg                             -- Mesajul de eroare capturat
   );
END;
/

SELECT * FROM erori;

BEGIN
   EXECUTE IMMEDIATE 'ALTER TABLE a DROP COLUMN nonexistent_column';
END;


--g) Pachet care să conțină toate obiectele definite în cadrul punctelor a b c d e f (inclusiv apelarea
--lor). Triggeri-i vor fi declanșați de instrucțiuni din subprogramele încapsulate în pachet.

CREATE OR REPLACE PACKAGE pachet_marfa AS
    PROCEDURE proceduraex9a;
    PROCEDURE proceduraex9b;
    FUNCTION functieex9c(p_id_client IN client.id_client%TYPE) RETURN comenzi_online.id_comanda%TYPE;
END pachet_marfa;
/
CREATE OR REPLACE PACKAGE BODY pachet_marfa AS
    -- Procedura a)
    PROCEDURE proceduraex9a AS
      TYPE cutii_comanda IS TABLE OF contor_marfa.nr_cutii%TYPE; -- nested table
         TYPE id_magazin IS TABLE OF contor_marfa.id_magazin%TYPE INDEX BY PLS_INTEGER; -- tabela indexata
         TYPE marfa_info IS VARRAY(100) OF VARCHAR2(100); 
       v_cutii cutii_comanda;
       v_locatie_id id_magazin;
       v_marfa_info marfa_info;
       CURSOR c_marfa_martie IS
          SELECT id_marfa, data_livrare
          FROM marfa
          WHERE EXTRACT(MONTH FROM data_livrare) = 3;
    
    BEGIN
        v_marfa_info := marfa_info();
        v_marfa_info.extend(100);
        
      BEGIN
      -- Actualizare pentru a declanșa triggerul în afara orelor de lucru
         UPDATE contract
         SET tip_contract = 'nou_tip'
         WHERE id_contract = 1;  -- Înlocuiește cu un ID valid existent în tabelul `contract`
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Eroare: ' || SQLERRM); -- Afișează mesajul de eroare din trigger
      END;
       FOR m IN c_marfa_martie LOOP
          SELECT contor_marfa.nr_cutii, contor_marfa.id_magazin, TO_CHAR(m.data_livrare, 'DD-MON-YYYY')
          BULK COLLECT INTO v_cutii, v_locatie_id, v_marfa_info
          FROM contor_marfa
          WHERE contor_marfa.id_marfa = m.id_marfa;
         
          FOR i IN 1..v_locatie_id.COUNT LOOP
             -- Calculam nr total de cutii pt fiecare locatie
             DBMS_OUTPUT.PUT_LINE('Magazinul ' || v_locatie_id(i) || ' a primit ' || v_cutii(i) || ' cutii de marfa pe ' || v_marfa_info(i) || '.');
          END LOOP;
       END LOOP;
    END proceduraex9a;
    -- Procedura b)
    PROCEDURE proceduraex9b IS
      -- Cursor simplu pentru a itera prin fiecare angajat
       CURSOR c_angajati IS
          SELECT id_angajat,
                 nume_angajat,
                 prenume_angajat
          FROM angajati;
    
      -- Cursor parametrizat pentru a calcula media notelor primite de fiecare angajat
       CURSOR c_rating (p_id_angajat NUMBER) IS
          SELECT AVG(nota_acordata) AS media
          FROM rating
          WHERE id_angajat = p_id_angajat;
      -- Variabile pentru a stoca media notelor primite de fiecare angajat
       v_id_angajat   angajati.id_angajat%TYPE;
       v_nume         angajati.nume_angajat%TYPE;
       v_prenume      angajati.prenume_angajat%TYPE;
       v_media_rating rating.nota_acordata%TYPE;
    BEGIN
       -- Iteram prin fiecare angajat
       FOR r_angajati IN c_angajati LOOP
          v_id_angajat := r_angajati.id_angajat;
          v_nume := r_angajati.nume_angajat;
          v_prenume := r_angajati.prenume_angajat;
    
          -- Calculam media notelor primite de fiecare angajat
          OPEN c_rating(v_id_angajat);
          FETCH c_rating INTO v_media_rating;
    
     -- Verificăm dacă a fost returnată o medie
          IF v_media_rating IS NOT NULL THEN
             -- Afisam media notelor primite de fiecare angajat
             DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' are media notelor primite: ' || v_media_rating);
          ELSE
             DBMS_OUTPUT.PUT_LINE('Angajatul ' || v_nume || ' ' || v_prenume || ' nu are note primite.');
          END IF;
    CLOSE c_rating;
       END LOOP;
    END proceduraex9b;

    --Funcția c)
    FUNCTION functieex9c (
         p_id_client IN client.id_client%TYPE
    ) RETURN comenzi_online.id_comanda%TYPE
    IS
       v_data_sfarsit DATE;
       v_rezultat     NUMBER;
       v_count_orders NUMBER;
    
       -- Definirea excepțiilor personalizate
       exceptie1 EXCEPTION;
       PRAGMA exception_init(exceptie1, -20001);
       exceptie2 EXCEPTION;
       PRAGMA exception_init(exceptie2, -20002);
       exceptie3 EXCEPTION;
       PRAGMA exception_init(exceptie3, -20003);
    
    BEGIN
    	UPDATE reducere SET procent = 60 WHERE id_client = 62;
       -- Verificarea existenței clientului
       SELECT COUNT(*)
       INTO v_rezultat
       FROM client
       WHERE id_client = p_id_client;
    
       IF v_rezultat = 0 THEN
          RAISE exceptie3; -- Clientul nu există
       ELSIF v_rezultat > 1 THEN
          RAISE exceptie2; -- Există mai mulți clienți cu același ID
       END IF;
    
       -- Calcularea datei de sfârșit a perioadei de reducere
       SELECT ADD_MONTHS(data_inceput, perioada_valabilitate * 12)
       INTO v_data_sfarsit
       FROM reducere
       WHERE id_client = p_id_client;
    
       -- Verificare dacă există o reducere validă
       IF v_data_sfarsit IS NULL THEN
          RAISE exceptie1; -- Nu există reducere
       END IF;
    
       -- Extrage comenzile online pentru client în perioada de reducere
       SELECT COUNT(co.id_comanda)
       INTO v_count_orders
       FROM comenzi_online co
       JOIN reducere r ON co.id_client = r.id_client
       WHERE co.id_client = p_id_client
         AND co.data_plasare BETWEEN r.data_inceput AND v_data_sfarsit;
    
       IF v_count_orders = 0 THEN
          RAISE exceptie1; -- Nu există comenzi online
       END IF;
    
       -- Returnează ID-ul comenzii (poate fi ajustat în funcție de nevoile tale)
       RETURN v_count_orders;
    
    EXCEPTION
       WHEN exceptie1 THEN
          DBMS_OUTPUT.PUT_LINE('Nu exista nicio comanda plasata pentru clientul dat');
          RETURN 0;
       WHEN exceptie2 THEN
          DBMS_OUTPUT.PUT_LINE('Exista mai multi clienti cu acelasi id in baza de date');
          RETURN 0;
       WHEN exceptie3 THEN
          DBMS_OUTPUT.PUT_LINE('Clientul dat nu exista in baza de date');
          RETURN 0;
       WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('A aparut o eroare: ' || SQLERRM);
          RETURN 0;
    END functieex9c;
END; 
/

BEGIN
    pachet_marfa.proceduraex9a;
    pachet_marfa.proceduraex9b;
    DBMS_OUTPUT.PUT_LINE('Numărul comenzilor online: ' || pachet_marfa.functieex9c(63));
END;
/